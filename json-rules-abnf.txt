grammar         = 1*(rule / directive) *c-wsp

rule            = rulename definition
definition      = *c-wsp ( value-rule / member-rule / array-rule / object-rule / group-rule )

; rulenames must be unique, and may not be a reserved word
rulename        = *c-wsp ALPHA *(ALPHA / DIGIT / "-" / "_")

; Adapted from the ABNF for JSON, RFC 4627 s 2.4
float           = [ "-" ] int [ frac ] [ exp ]
integer         = [ "-" ] int [ exp ]
exp             = ( "e" / "E" ) [ "+" / "-" ] 1*DIGIT
frac            = "." 1*DIGIT
int             = "0" / ( %x31-39 *DIGIT )

; The regex-char rule allows for any sequence of characters, including
; whitespace and newlines, with backslash only allowed before either
; a forward or a backslash.
regex-char      = %x21-2E / %x30-5D / %x5E-7E / WSP /
                  CR / LF / "\/" / "\\"

; uri-scheme from RFC 3986
uri-scope       = *c-wsp ( "relative" / "full" )
uri-scheme      = *c-wsp ALPHA *( ALPHA / DIGIT / "+" / "-" / "." )

boolean-type    = "boolean"
null-type       = "null"
integer-type    = "integer" [ 1*c-wsp integer ".." integer ]
float-type      = "float"   [ 1*c-wsp float   ".." float   ]
string-type     = "string"  [ *c-wsp "/" *regex-char "/" ]
uri-type        = "uri"     [ uri-scope ] [ uri-scheme ]
ip-type         = "ip4" / "ip6"
dns-type        = "fqdn" / "idn"
date-type       = "date-time" / "full-date" / "full-time"
email-type      = "email" [ *c-wsp ( "2822" / "5322" ) ]
phone-type      = "phone"
base64-type     = "base64"
any-type        = "any"

value-rule      = ":" *c-wsp type-rule
type-rule       = boolean-type /
                  null-type /
                  integer-type /
                  float-type /
                  string-type /
                  uri-type /
                  ip-type /
                  dns-type / 
                  date-type /
                  email-type /
                  phone-type /
                  base64-type /
                  any-type

inline-rule     = *c-wsp ( rulename / definition )

; The defintion of a JSON string, from RFC 4627 s 2
json-name       = %x20-21 / %x23-5B / %x5D-10FFFF / "\" (
                    %x22 /      ; "  u+0022
                    %x5C /      ; \  u+005C
                    %x2F /      ; /  u+002F
                    %x62 /      ; BS u+0008
                    %x66 /      ; FF u+000C
                    %x6E /      ; LF u+000A
                    %x72 /      ; CR u+000D
                    %x74 /      ; HT u+0009
                    ( %x75 4HEXDIG ) ) ; uXXXX u+XXXX

member-rule     = ( ( "^" %x22.22 ) / ( %x22 *json-name %x22 ) ) inline-rule

object-rule     = "{" [ object-member *( *c-wsp ( "," / "/" / "&" ) object-member ) ] *c-wsp "}"

object-member   = *c-wsp ["?"] ( rulename / member-rule / group-rule )

array-rule      = "[" [ array-member *( *c-wsp "," array-member ) ] *c-wsp "]"

array-count     = *c-wsp [ [int] "*" [int] *c-wsp ]
array-member    = array-count ( rulename / value-rule / object-rule / group-rule )
                  [ *c-wsp "/" array-member ]

group-rule      = "(" [ group-member *( *c-wsp "," group-member) ] *c-wsp ")"

group-member    =  ["?"] inline-rule [ *c-wsp ( "/" / "&" ) group-member ]

directive       = *c-wsp "#" *( VCHAR / WSP / %x7F-10FFFF ) EOL

; Taken from the ABNF for ABNF (RFC 4627 section 4) and slightly adapted
; newlines in a c-wsp do not need whitespace at the start of a newline
; to form a valid continuation line, and EOL might not be a full CRLF
c-wsp           = WSP / c-nl
c-nl            = comment / EOL
comment         =  ";" *(WSP / VCHAR) EOL
EOL             = 1*( CR / LF )

; core rules
ALPHA          =  %x41-5A / %x61-7A   ; A-Z / a-z
CR             =  %x0D
DIGIT          =  %x30-39
HEXDIG         =  DIGIT / "A" / "B" / "C" / "D" / "E" / "F"
LF             =  %x0A
VCHAR          =  %x21-7E
WSP            =  SP / HTAB
SP             =  %x20
HTAB           =  %x09
